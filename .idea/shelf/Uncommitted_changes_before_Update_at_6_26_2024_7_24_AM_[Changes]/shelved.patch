Index: src/HTMLdashboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\r\nimport java.io.PrintWriter;\r\n/**\r\n * This outputs the HTML for the imageData solution database\r\n */\r\npublic class HTMLdashboard {\r\n    /**\r\n     * Wolfram code utility class\r\n     */\r\n    BasicECA beca = new BasicECA();\r\n    /**\r\n     * Generates HTML menu of the 0-255 ECA rules arranged by left-right-black-white symmetries\r\n     * @return HTML string\r\n     */\r\n    public String generateLRBW() {\r\n        String out = \"<p>0-255 ECA by left, right, black-white,left-right-black-white symmetry groups</p>\\n\";\r\n        out += \"<table >\\n\";\r\n        for (int row = 0; row < 88; row++) {\r\n            out += \"<tr>\\n\";\r\n            for (int column = 0; column < 4; column++) {\r\n                out += \"<td>\" + \"<a href=\\\"..\\\\ECA_\" + beca.equivRules[row][column] + \"\\\\ECA_\" + beca.equivRules[row][column] + \"_index.html\\\">\" + beca.equivRules[row][column] + \"</a>\" + \"</td>\\n\";\r\n            }\r\n            out += \"</tr>\\n\";\r\n        }\r\n        out += \"</table>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the 0-255 ECA as an HTML menu organized in a 16x16 square\r\n     * @return HTML string\r\n     */\r\n    public String generateMainSquare() {\r\n        String out = \"<p>0-255 ECA</p>\\n\";\r\n        out += \"<table >\\n\";\r\n        for (int row = 0; row < 16; row++) {\r\n            out += \"<tr>\\n\";\r\n            for (int column = 0; column < 16; column++) {\r\n                out += \"<td>\" + \"<a href=\\\"..\\\\ECA_\" + (16 * row + column) + \"\\\\ECA_\" + (16 * row + column) + \"_index.html\\\">\" + (16 * row + column) + \"</a></td>\\n\";\r\n            }\r\n            out += \"</tr>\\n\";\r\n        }\r\n        out += \"</table>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates an ECA HTML menu organized by left-right-black-white rule symmetry\r\n     * @param overloadDummy dummy variable to overload the other generateLRBW()\r\n     * @return HTML string\r\n     */\r\n    public String generateLRBW(boolean overloadDummy) {\r\n        String out = \"<p>0-255 ECA by left, right, black-white,left-right-black-white symmetry groups</p>\\n\";\r\n        out += \"<table >\\n\";\r\n        for (int row = 0; row < 88; row++) {\r\n            out += \"<tr>\\n\";\r\n            for (int column = 0; column < 4; column++) {\r\n                out += \"<td>\" + \"<a href=\\\"ECA_\" + beca.equivRules[row][column] + \"\\\\ECA_\" + beca.equivRules[row][column] + \"_index.html\\\">\" + beca.equivRules[row][column] + \"</a>\" + \"</td>\\n\";\r\n            }\r\n            out += \"<td> Class: \" + beca.ruleClasses[beca.equivRules[row][0]] + \"</td>\";\r\n            out += \"</tr>\\n\";\r\n        }\r\n        out += \"</table>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the 0-255 ECA HTML nav menu organized in a 16x16 square\r\n     * @param overloadDummy dummy variable to overload the other generateMainSquare()\r\n     * @return HTML string\r\n     */\r\n    public String generateMainSquare(boolean overloadDummy) {\r\n        String out = \"<p>0-255 ECA</p>\\n\";\r\n        out += \"<table >\\n\";\r\n        for (int row = 0; row < 16; row++) {\r\n            out += \"<tr>\\n\";\r\n            for (int column = 0; column < 16; column++) {\r\n                out += \"<td>\" + \"<a href=\\\"ECA_\" + (16 * row + column) + \"\\\\ECA_\" + (16 * row + column) + \"_index.html\\\">\" + (16 * row + column) + \"</a></td>\\n\";\r\n            }\r\n            out += \"</tr>\\n\";\r\n        }\r\n        out += \"</table>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the site navigation HTML menu for logic gate Wolfram code solutions\r\n     * @return HTML string\r\n     */\r\n    public String generateLogicMenu() {\r\n        String[] logicGateNames = new String[]{\"False\", \"NOR\", \"B and Not A\", \"Not A\", \"A and Not B\", \"Not B\", \"XOR\", \"NAND\", \"AND\", \"XNOR\", \"A\", \"B Or Not A\", \"B\", \"A Or Not B\", \"OR\", \"True\"};\r\n        String out = \"<p>0-16 Logic gate truth tables as Wolfram codes</p>\\n\";\r\n        out += \"<table>\\n\";\r\n        for (int gate = 0; gate < 16; gate++) {\r\n            out += \"<tr>\\n\";\r\n            out += \"<td><a href=\\\"Logic_\" + gate + \"\\\\logic_\" + gate + \"_index.html\\\">\" + \"Gate: \" + gate + \", \" + logicGateNames[gate] + \"</a></td>\\n\";\r\n            out += \"</tr>\\n\";\r\n        }\r\n        out += \"</table>\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the HTML image code for an ECA solution\r\n     * @param n 0-255 ECA rule\r\n     * @return HTML string\r\n     */\r\n    public String generateSpecificRule(int n) {\r\n        String out = \"\";\r\n        out += \"<p>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_singlebit.jpg\\\">Single bit initial input</img>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_randombinary.jpg\\\">Random binary input</img>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_nonneg.jpg\\\">Non-negative real</img>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_complexReal.jpg\\\">Multiplications B, real part</img>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_complexImaginary.jpg\\\">Multiplications B, imaginary part</img>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_nfReal.jpg\\\">Multiplications C, real part</img>\\n\";\r\n        out += \"<img src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_nfImaginary.jpg\\\">Multiplications C, imaginary part</img>\\n\";\r\n        out += \"</p>\\n\";\r\n        out += \"<p>\\n\";\r\n        out += \"<embed src = \\\"..\\\\ECA_\" + n + \"\\\\RandomSolution\\\\eca\" + n + \"_info.txt\\\" width=\\\"400\\\" height=\\\"400\\\"/>\\n\";\r\n        out += \"</p>\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the images HTML for a specific ECA rule\r\n     * @param n 0-255 ECA rule\r\n     * @param normalization normalization 0-7\r\n     * @return HTML string\r\n     */\r\n    public String generateSpecificRule(int n, int normalization) {\r\n        String out = \"\";\r\n        out += \"<p>\\n\";\r\n        out += (\"<br><br><img src = \\\"eca\" + n + \"_nonneg.jpg\\\"><br>Non-negative real</img><br>\\n\");\r\n        out += \"<br><br><img src = \\\"eca\" + n + \"_complexReal.jpg\\\"><br>Multiplications B, real part</img><br>\\n\";\r\n        out += \"<br><br><img src = \\\"eca\" + n + \"_complexImaginary.jpg\\\"><br>Multiplications B, imaginary part</img><br>\\n\";\r\n        out += \"<br><br><img src = \\\"eca\" + n + \"_nfReal.jpg\\\"><br>Multiplications C, real part</img><br>\\n\";\r\n        out += \"<br><br><img src = \\\"eca\" + n + \"_nfImaginary.jpg\\\"><br>Multiplications C, imaginary part</img><br>\\n\";\r\n        out += \"<p>\\n\";\r\n        out += \"<embed src = \\\"eca\" + n + \"_info.txt\\\" width=\\\"400\\\" height=\\\"400\\\"/>\\n\";\r\n        out += \"<embed src =\\\"eca\"+n+\"_normalizations.txt\\\" width = \\\"400\\\" height =\\\"400\\\"/>\\n\";\r\n\r\n        out += \"</p>\";\r\n        out += \"</p>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the image HTML for a specific logic gate solution\r\n     * @param n 0-15 logic gate\r\n     * @return HTML string\r\n     */\r\n    public String generateSpecificRuleLogic(int n) {\r\n        String out = \"\";\r\n        out += \"<p>\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_singlebit.jpg\\\">\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_randombinary.jpg\\\">\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_nonneg.jpg\\\">\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_complexReal.jpg\\\">\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_complexImaginary.jpg\\\">\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_nfReal.jpg\\\">\\n\";\r\n        out += \"<img src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_nfImaginary.jpg\\\">\\n\";\r\n        out += \"</p>\\n\";\r\n        out += \"<p>\\n\";\r\n        out += \"<embed src = \\\"..\\\\Logic_\" + n + \"\\\\RandomSolution\\\\logic\" + n + \"_info.txt\\\" width=\\\"400\\\" height=\\\"400\\\"/>\\n\";\r\n\r\n        out += \"</p>\";\r\n        return out;\r\n    }\r\n    /**\r\n     * generates the string of a generic HTML doc opener\r\n     * @return HTML string of generic doc opener\r\n     */\r\n    public String generateGenericOpener() {\r\n        String out = \"\";\r\n        out += \"<!-- index.html -->\\n\";\r\n        out += \"<!DOCTYPE html>\\n\";\r\n        out += \"<html>\\n\";\r\n        out += \"<body>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the ECA solution indexes with no sub folders\r\n     */\r\n    public void generateIndexFiles() {\r\n        try {\r\n            PrintWriter printWriter = new PrintWriter(\"imageData\\\\mainIndex.html\");\r\n            printWriter.print(generateGenericOpener());\r\n            printWriter.write(generateLogicMenu());\r\n            printWriter.print(generateMainSquare(true));\r\n            printWriter.print(generateLRBW(true));\r\n            printWriter.print(\"</body>\\n\");\r\n            printWriter.print(\"</html>\\n\");\r\n            printWriter.close();\r\n        } catch (Exception e) {\r\n            System.out.println(e.toString());\r\n        }\r\n        for (int n = 0; n < 256; n++) {\r\n            try {\r\n                PrintWriter printWriter = new PrintWriter(\"imageData\\\\ECA_\" + n + \"\\\\ECA_\" + n + \"_index.html\");\r\n                printWriter.println(generateGenericOpener());\r\n                printWriter.println(\"<a href=\\\"..\\\\mainIndex.html\\\">Main</a>\");\r\n                printWriter.write(generateSpecificRule(n));\r\n                printWriter.print(\"</body>\\n\");\r\n                printWriter.print(\"</html>\\n\");\r\n                printWriter.close();\r\n            } catch (Exception e) {\r\n                System.out.println(e.toString());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Generates ECA solution indexes with normalizations sub folders\r\n     */\r\n    public void generateIndexFilesWithNormalizations() {\r\n        try {\r\n            PrintWriter printWriter = new PrintWriter(\"imageData\\\\mainIndex.html\");\r\n            printWriter.print(generateGenericOpener());\r\n            printWriter.print(generateLogicMenu());\r\n            printWriter.print(generateMainSquare(true));\r\n            printWriter.print(generateLRBW(true));\r\n            printWriter.print(\"</body>\\n\");\r\n            printWriter.print(\"</html>\\n\");\r\n            printWriter.close();\r\n        } catch (Exception e) {\r\n            System.out.println(e.toString());\r\n        }\r\n        for (int n = 0; n < 256; n++) {\r\n            try {\r\n                PrintWriter printWriter = new PrintWriter(\"imageData\\\\ECA_\" + n + \"\\\\ECA_\" + n + \"_index.html\");\r\n                printWriter.print(generateGenericOpener());\r\n                printWriter.print(\"<a href=\\\"..\\\\mainIndex.html\\\">Main</a><br>\");\r\n                printWriter.print(generateNormalizationsIndex(n));\r\n                printWriter.print(\"<br><br><img src = \\\"image_singlebit.jpg\\\"><br>Single bit initial input</img><br>\\n\");\r\n                printWriter.print(\"<br><br><img src = \\\"image_randombinary.jpg\\\"><br>Random binary input</img><br>\\n\");\r\n                printWriter.print(\"</body>\\n\");\r\n                printWriter.print(\"</html>\\n\");\r\n                printWriter.close();\r\n                for (int normalization = 0; normalization < 8; normalization++) {\r\n                    printWriter = new PrintWriter(\"imageData\\\\ECA_\" + n + \"\\\\Normalization_\" + normalization + \"\\\\ECA_\" + n + \"_index.html\");\r\n                    printWriter.print(generateGenericOpener());\r\n                    printWriter.print(\"<a href=\\\"..\\\\ECA_\" + n + \"_index.html\\\">Rule</a><br><br>\");\r\n                    printWriter.print(generateNormalizationsNormalizations(n));\r\n                    printWriter.print(generateSpecificRule(n, normalization));\r\n                    printWriter.print(\"</body>\\n\");\r\n                    printWriter.print(\"</html>\\n\");\r\n                    printWriter.close();\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(e.toString());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Generates logic gate Wolfram code indexes with normalizations subfolders\r\n     */\r\n    public void generateIndexFilesWithNormalizationsLogic() {\r\n//        try {\r\n//            PrintWriter printWriter = new PrintWriter(\"imageData\\\\mainIndex.html\");\r\n//            printWriter.print(generateGenericOpener());\r\n//            printWriter.print(generateLogicMenu());\r\n//            printWriter.print(generateMainSquare(true));\r\n//            printWriter.print(generateLRBW(true));\r\n//            printWriter.print(\"</body>\\n\");\r\n//            printWriter.print(\"</html>\\n\");\r\n//            printWriter.close();\r\n//        } catch (Exception e) {\r\n//            System.out.println(e.toString());\r\n//        }\r\n        for (int n = 0; n < 16; n++) {\r\n            try {\r\n                PrintWriter printWriter = new PrintWriter(\"imageData\\\\Logic_\" + n + \"\\\\logic_\" + n + \"_index.html\");\r\n                printWriter.print(generateGenericOpener());\r\n                printWriter.print(\"<a href=\\\"..\\\\mainIndex.html\\\">Main</a><br>\");\r\n                printWriter.print(generateNormalizationsIndex(n));\r\n                printWriter.print(\"<br><br><img src = \\\"Normalization_0\\\\logic\"+n+\"_singlebit.jpg\\\">Single bit initial input</img><br>\\n\");\r\n                printWriter.print(\"<br><br><img src = \\\"Normalization_0\\\\logic\"+n+\"_randombinary.jpg\\\">Random binary input</img><br>\\n\");\r\n                printWriter.print(\"</body>\\n\");\r\n                printWriter.print(\"</html>\\n\");\r\n                printWriter.close();\r\n                for (int normalization = 0; normalization < 8; normalization++) {\r\n                    printWriter = new PrintWriter(\"imageData\\\\logic_\" + n + \"\\\\Normalization_\" + normalization + \"\\\\logic_\" + n + \"_index.html\");\r\n                    printWriter.print(generateGenericOpener());\r\n                    printWriter.print(\"<br><br><a href=\\\"..\\\\logic_\" + n + \"_index.html\\\">Rule</a><br><br>\");\r\n                    printWriter.print(generateNormalizationsNormalizationsLogic(n));\r\n                    printWriter.print(generateSpecificRuleLogic(n, normalization));\r\n                    printWriter.print(\"</body>\\n\");\r\n                    printWriter.print(\"</html>\\n\");\r\n                    printWriter.close();\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(e.toString());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Generates the normalization sub-folder HTML menu for an ECA solution\r\n     * @param n ECA rule\r\n     * @return HTML string\r\n     */\r\n    public String generateNormalizationsIndex(int n) {\r\n        String out = generateGenericOpener();\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_0\\\\ECA_\" + n + \"_index.html\\\">Normalization 0</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_1\\\\ECA_\" + n + \"_index.html\\\">Normalization 1</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_2\\\\ECA_\" + n + \"_index.html\\\">Normalization 2</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_3\\\\ECA_\" + n + \"_index.html\\\">Normalization 3</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_4\\\\ECA_\" + n + \"_index.html\\\">Normalization 4</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_5\\\\ECA_\" + n + \"_index.html\\\">Normalization 5</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_6\\\\ECA_\" + n + \"_index.html\\\">Normalization 6</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\ECA_\" + n + \"\\\\Normalization_7\\\\ECA_\" + n + \"_index.html\\\">Normalization 7</a><br>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the normalization sub-folder HTML menu for a logic gate Wolfram code solution\r\n     * @param n 0-15 logic gate\r\n     * @return HTML string\r\n     */\r\n    public String generateNormalizationsIndexLogic(int n) {\r\n        String out = generateGenericOpener();\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_0\\\\logic_\" + n + \"_index.html\\\">Normalization 0</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_1\\\\logic_\" + n + \"_index.html\\\">Normalization 1</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_2\\\\logic_\" + n + \"_index.html\\\">Normalization 2</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_3\\\\logic_\" + n + \"_index.html\\\">Normalization 3</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_4\\\\logic_\" + n + \"_index.html\\\">Normalization 4</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_5\\\\logic_\" + n + \"_index.html\\\">Normalization 5</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_6\\\\logic_\" + n + \"_index.html\\\">Normalization 6</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Logic_\" + n + \"\\\\Normalization_7\\\\logic_\" + n + \"_index.html\\\">Normalization 7</a><br>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the HTML normalization sub-folder rule nav menu\r\n     * @param n 0-255 ECA rule\r\n     * @return HTML string\r\n     */\r\n    public String generateNormalizationsNormalizations(int n) {\r\n        String out = generateGenericOpener();\r\n        out += \"<a href=\\\"..\\\\Normalization_0\\\\ECA_\" + n + \"_index.html\\\">Normalization 0</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_1\\\\ECA_\" + n + \"_index.html\\\">Normalization 1</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_2\\\\ECA_\" + n + \"_index.html\\\">Normalization 2</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_3\\\\ECA_\" + n + \"_index.html\\\">Normalization 3</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_4\\\\ECA_\" + n + \"_index.html\\\">Normalization 4</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_5\\\\ECA_\" + n + \"_index.html\\\">Normalization 5</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_6\\\\ECA_\" + n + \"_index.html\\\">Normalization 6</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_7\\\\ECA_\" + n + \"_index.html\\\">Normalization 7</a><br>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the HTML normalization sub-folder logic gate solution menu\r\n     * @param n Logic gate number in decimal\r\n     * @return HTML string\r\n     */\r\n    public String generateNormalizationsNormalizationsLogic(int n) {\r\n        String out = generateGenericOpener();\r\n        out += \"<a href=\\\"..\\\\Normalization_0\\\\logic_\" + n + \"_index.html\\\">Normalization 0</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_1\\\\logic_\" + n + \"_index.html\\\">Normalization 1</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_2\\\\logic_\" + n + \"_index.html\\\">Normalization 2</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_3\\\\logic_\" + n + \"_index.html\\\">Normalization 3</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_4\\\\logic_\" + n + \"_index.html\\\">Normalization 4</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_5\\\\logic_\" + n + \"_index.html\\\">Normalization 5</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_6\\\\logic_\" + n + \"_index.html\\\">Normalization 6</a><br>\\n\";\r\n        out += \"<a href=\\\"..\\\\Normalization_7\\\\logic_\" + n + \"_index.html\\\">Normalization 7</a><br>\\n\";\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates the main Logic solution directory index\r\n     */\r\n    public void generateLogicIndexFiles() {\r\n        for (int n = 0; n < 16; n++) {\r\n            try {\r\n                PrintWriter printWriter = new PrintWriter(\"imageData\\\\logic_\" + n + \"\\\\logic_\" + n + \"_index.html\");\r\n                printWriter.println(generateGenericOpener());\r\n                printWriter.println(\"<a href=\\\"..\\\\mainIndex.html\\\">Main</a>\");\r\n                printWriter.write(generateSpecificRuleLogic(n));\r\n                printWriter.print(\"</body>\\n\");\r\n                printWriter.print(\"</html>\\n\");\r\n                printWriter.close();\r\n            } catch (Exception e) {\r\n                System.out.println(e.toString());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Generates the specific solution with normalization parameters of a logic gate Wolfram code\r\n     * @param n logic gate number\r\n     * @param normalization normalization number, 0-7\r\n     * @return HTML string\r\n     */\r\n    public String generateSpecificRuleLogic(int n, int normalization) {\r\n        String out = \"\";\r\n        out += \"<p>\\n\";\r\n        out += (\"<br><br><img src = \\\"logic\" + n + \"_nonneg.jpg\\\"><br>Non-negative real</img><br>\\n\");\r\n        out += \"<br><br><img src = \\\"logic\" + n + \"_complexReal.jpg\\\"><br>Multiplications B, real part</img><br>\\n\";\r\n        out += \"<br><br><img src = \\\"logic\" + n + \"_complexImaginary.jpg\\\"><br>Multiplications B, imaginary part</img><br>\\n\";\r\n        out += \"<br><br><img src = \\\"logic\" + n + \"_nfReal.jpg\\\"><br>Multiplications C, real part</img><br>\\n\";\r\n        out += \"<br><br><img src = \\\"logic\" + n + \"_nfImaginary.jpg\\\"><br>Multiplications C, imaginary part</img><br>\\n\";\r\n        out += \"<p>\\n\";\r\n        out += \"<embed src = \\\"logic\" + n + \"_info.txt\\\" width=\\\"400\\\" height=\\\"400\\\"/>\\n\";\r\n        out += \"<embed src =\\\"logic\"+n+\"_normalizations.txt\\\" width = \\\"400\\\" height =\\\"400\\\"/>\\n\";\r\n        out += \"</p>\";\r\n        out += \"</p>\\n\";\r\n        return out;\r\n    }\r\n    public void generateDirectory(String directoryName){\r\n            File file = new File(\"imageData\\\\directory.txt\");\r\n            file.mkdirs();\r\n            File[] ecaFiles = new File[256];\r\n            File[] logicFiles = new File[16];\r\n            File[] normalizationFiles = new File[8];\r\n            for (int n = 0; n < 256; n++) {\r\n                ecaFiles[n] = new File(\"imageData\\\\ECA_\"+n+\"\\\\directory.txt\");\r\n                ecaFiles[n].mkdirs();\r\n                for (int norm = 0; norm < 8; norm++){\r\n                    normalizationFiles[norm] = new File(\"imageData\\\\ECA_\"+n+\"\\\\Normalization_\"+norm+\"\\\\directory.txt\");\r\n                    normalizationFiles[norm].mkdirs();\r\n                }\r\n            }\r\n        for (int n = 0; n < 16; n++) {\r\n            logicFiles[n] = new File(\"imageData\\\\Logic_\"+n+\"\\\\directory.txt\");\r\n            logicFiles[n].mkdirs();\r\n            for (int norm = 0; norm < 8; norm++){\r\n                normalizationFiles[norm] = new File(\"imageData\\\\Logic_\"+n+\"\\\\Normalization_\"+norm+\"\\\\directory.txt\");\r\n                normalizationFiles[norm].mkdirs();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/HTMLdashboard.java b/src/HTMLdashboard.java
--- a/src/HTMLdashboard.java	(revision 5ee4163d4d25bb48abf8406570625b7611acb113)
+++ b/src/HTMLdashboard.java	(date 1719401034853)
@@ -95,6 +95,7 @@
         out += "</table>";
         return out;
     }
+
     /**
      * Generates the HTML image code for an ECA solution
      * @param n 0-255 ECA rule
